#include "accents.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

// Layer Definitions

#define BASE 0
#define NUME 1
#define SYMB 2
#define FUNC 3
#define GAME 4
#define NAVI 5
#define FGAM 6
#define ACCE 7

// Behavior configuration

&mt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <500>;
    quick-release;
};

/ {
    macros {
        close: close {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp F4>,
                <&macro_release>,
                <&kp LALT>;
        };

        guileft: guileft {
            compatible = "zmk,behavior-macro";
            label = "GUILEFT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LEFT_GUI>;
        };

        guiright: guiright {
            compatible = "zmk,behavior-macro";
            label = "GUIRIGHT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LEFT_WIN>;
        };

        lock: lock {
            compatible = "zmk,behavior-macro";
            label = "LOCK";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp L>,
                <&macro_release>,
                <&kp LEFT_GUI>;
        };

        gui_up: gui_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp UP_ARROW>,
                <&macro_release>,
                <&kp LEFT_GUI>;

            label = "GUI_UP";
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        funcion {
            bindings = <&mo 4>;
            key-positions = <15 16>;
            layers = <0>;
        };

        game {
            bindings = <&tog 5>;
            key-positions = <11 23 35>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp TAB         &kp Q  &kp W  &kp E         &kp R  &kp T        &kp Y    &kp U            &kp I      &kp O    &kp P     &kp DEL
&kp LS(CLCK)    &kp A  &kp S  &kp D         &kp F  &kp G        &kp H    &kp J            &kp K      &kp L    &kp SEMI  &kp APOS
&kp LC(ESCAPE)  &kp Z  &kp X  &kp C         &kp V  &kp B        &kp N    &kp M            &kp COMMA  &kp DOT  &kp FSLH  &kp RSHIFT
                              &kp LEFT_ALT  &mo 1  &kp SPACE    &kp RET  &lt 2 BACKSPACE  &kp RALT
            >;
        };

        number_layer {
            bindings = <
&trans        &kp NUMBER_1   &kp NUMBER_2  &kp NUMBER_3   &kp NUMBER_4      &kp N5         &kp NUMBER_6   &kp N7           &kp N8        &kp N9                &kp N0                 &trans
&trans        &kp EXCL       &kp AT_SIGN   &kp HASH       &kp DOLLAR        &kp PERCENT    &kp CARET      &kp AMPERSAND    &kp ASTRK     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp F10
&kp LEFT_ALT  &kp BACKSLASH  &kp PIPE      &kp LESS_THAN  &kp GREATER_THAN  &kp PLUS       &kp KP_DIVIDE  &kp KP_ASTERISK  &kp KP_EQUAL  &kp KP_PLUS           &kp KP_MINUS           &kp F20
                                           &kp LGUI       &trans            &kp SPACE      &kp RET        &kp RCTRL        &kp RALT
            >;
        };

        symbol_layer {
            bindings = <
&trans        &kp NUMBER_1   &kp NUMBER_2  &kp NUMBER_3   &kp NUMBER_4      &kp N5         &kp NUMBER_6   &kp N7           &kp N8        &kp N9                &kp N0                 &trans
&trans        &kp EXCL       &kp AT_SIGN   &kp HASH       &kp DOLLAR        &kp PERCENT    &kp CARET      &kp AMPERSAND    &kp ASTRK     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp F10
&kp LEFT_ALT  &kp BACKSLASH  &kp PIPE      &kp LESS_THAN  &kp GREATER_THAN  &kp PLUS       &kp KP_DIVIDE  &kp KP_ASTERISK  &kp KP_EQUAL  &kp KP_PLUS           &kp KP_MINUS           &kp F20
                                           &kp LGUI       &trans            &kp SPACE      &kp RET        &kp RCTRL        &kp RALT
            >;
        };

        accent_layer {
         bindings = <
&trans        &kp NUMBER_1   &kp NUMBER_2  &kp NUMBER_3   &kp NUMBER_4      &kp N5         &kp NUMBER_6   &kp N7           &kp N8        &kp N9                &kp N0                 &trans
&trans        &kp EXCL       &kp AT_SIGN   &kp HASH       &kp DOLLAR        &kp PERCENT    &kp CARET      &kp AMPERSAND    &kp ASTRK     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp F10
&kp LEFT_ALT  &kp BACKSLASH  &kp PIPE      &kp LESS_THAN  &kp GREATER_THAN  &kp PLUS       &kp KP_DIVIDE  &kp KP_ASTERISK  &kp KP_EQUAL  &kp KP_PLUS           &kp KP_MINUS           &kp F20
                                           &kp LGUI       &trans            &kp SPACE      &kp RET        &kp RCTRL        &kp RALT







//&trans  &none      &none    &kp HASH  &kp CARET  &none        &none      &ac_otil  &ac_oacu  &ac_uacu  &none     &trans
//&trans  &kp GRAVE  &kp DQT  &kp SQT   &kp EXCL   &kp TILDE    &ac_agrv   &ac_atil  &ac_aacu  &ac_eacu  &ac_iacu  &trans
//&trans  &none      &none    &ac_ccdi  &none      &none        &none      &ac_acir  &ac_ocir  &ac_ecir  &none     &trans
//                            &trans    &trans     &trans       &kp ENTER  &kp BSPC  &kp DEL
            >;
        };

        function_layer {
            bindings = <
&trans  &sys_reset  &trans &trans    &trans   &bt BT_SEL 0    &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans
&trans  &bootloader &trans   &trans   &trans  &bt BT_SEL 1     &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans
&trans  &bt BT_CLR  &trans   &trans &trans    &bt BT_SEL 2     &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans
                        &trans  &trans  &trans                  &trans  &trans  &trans
            >;
        };

        game_layer {
            bindings = <
&kp TAB         &trans  &trans  &trans     &trans        &trans    &trans  &trans         &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &trans  &trans  &trans     &trans        &kp F5    &trans  &trans         &trans  &trans  &trans  &trans
&kp LCTRL       &trans  &trans  &trans     &trans        &trans    &trans  &trans         &trans  &trans  &trans  &to 0
                                &kp LA(M)  &lt 7 ESCAPE  &trans    &trans  &kp RIGHT_WIN  &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp DQT    &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS          &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE          &trans  &trans     &trans     &kp RALT  &trans    &trans
                             &kp LPAR   &kp RPAR   &kp UNDERSCORE    &trans  &trans     &trans
            >;
        };

        fgame_layer {
            bindings = <
&kt F5   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &trans  &trans  &trans  &trans  &trans  &trans
&kp L    &kp L         &kp O         &kp Y         &kp K         &kp G           &trans  &trans  &trans  &trans  &trans  &kp LA(F4)
&kp F10  &none         &to 0         &none         &kp NUMBER_6  &kp NUMBER_7    &trans  &trans  &trans  &trans  &trans  &to 0
                                     &kp J         &kp I         &kp M           &trans  &trans  &trans
            >;
        };
    };
};
